// -----------------------------------------------------------
// This program is private software, based on C# source code.
// To sell or change credits of this software is forbidden,
// except if someone approves it from the LeafyCoding INC. team.
// -----------------------------------------------------------
// Copyrights (c) 2016 Leafy-MD5check INC. All rights reserved.
// -----------------------------------------------------------

#region

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using Leafy_MD5check.Classes;
using Ookii.Dialogs.Wpf;

#endregion

namespace Leafy_MD5check
{
    /// <summary>
    ///     Interaction logic for MainWindow.xaml
    /// </summary>
    internal sealed partial class MainWindow
    {
        private DelegateCommand _compareCommand;
        private DelegateCommand _exportCommand;

        public MainWindow()
        {
            InitializeComponent();
        }

        public ICommand ExportCommand => _exportCommand ?? (_exportCommand = new DelegateCommand(ExportHashes));

        public ICommand CompareCommand => _compareCommand ?? (_compareCommand = new DelegateCommand(CompareHashes));

        public static ObservableCollection<SelectableViewModel> Items { get; set; }

        private static void CompareHashes()
        {
            throw new NotImplementedException();
        }

        private static void ExportHashes()
        {
            var saveToFile = string.Empty;

            var dialog = new VistaSaveFileDialog
            {
                AddExtension = true,
                CheckFileExists = true,
                CheckPathExists = true,
                CreatePrompt = false,
                DefaultExt = "md5",
                DereferenceLinks = true,
                ValidateNames = true,
                Filter = @"MD5 checksum (*.md5) | *.md5 | All files (*.*) | *.*"
            };

            var showDialog = dialog.ShowDialog();
            if (showDialog != null && (bool) showDialog)
            {
                saveToFile = dialog.FileName;
            }

            if (!string.IsNullOrEmpty(saveToFile))
            {
                var md5file = new List<string>
                {
                    "-----------------------------------",
                    "File generated by LeafyMD5Check",
                    "At " + DateTime.Now.ToString("f"),
                    "-----------------------------------" + Environment.NewLine
                };

                md5file.AddRange(Items.Select(item => $"{item.Result} | {item.Name}"));

                File.WriteAllLines(saveToFile, md5file);

                Process.Start("notepad.exe", saveToFile);
            }
        }

        private void MetroWindow_Loaded(object sender, RoutedEventArgs e)
        {
            Items = new ObservableCollection<SelectableViewModel>();

            Dispatcher.Invoke(() =>
            {
                DataGrid.ItemsSource = null;
                DataGrid.ItemsSource = Items;
                DataGrid.Items.Refresh();
            });
        }

        private async void Panel_Drop(object sender, DragEventArgs e) => await Task.Run(() => AddEntry(e));

        private void AddEntry(DragEventArgs e)
        {
            if (e.Data.GetDataPresent(DataFormats.FileDrop))
            {
                var files = (string[]) e.Data.GetData(DataFormats.FileDrop);

                foreach (var entry in files)
                {
                    var attr = File.GetAttributes(entry);

                    if (attr.HasFlag(FileAttributes.Directory))
                    {
                        foreach (var file in Directory.EnumerateFiles(entry))
                        {
                            var name = file.Split(new[] {"\\"}, StringSplitOptions.None).Last();
                            var path = file.Replace($"\\{name}", "");

                            Dispatcher.Invoke(() =>
                            {
                                Items.Add(new SelectableViewModel
                                {
                                    Name = name,
                                    Path = path,
                                    Result = GetMD5(file)
                                });
                            });
                        }
                    }
                    else
                    {
                        var name = entry.Split(new[] {"\\"}, StringSplitOptions.None).Last();
                        var path = entry.Replace($"\\{name}", "");
                        Dispatcher.Invoke(() =>
                        {
                            Items.Add(new SelectableViewModel
                            {
                                Name = name,
                                Path = path,
                                Result = GetMD5(entry)
                            });
                        });
                    }
                }
            }
        }

        private static string GetMD5(string name)
        {
            using (var md5 = MD5.Create())
            {
                using (var stream = File.OpenRead(name))
                {
                    return BitConverter.ToString(md5.ComputeHash(stream)).Replace("-", "").ToLower();
                }
            }
        }
    }
}